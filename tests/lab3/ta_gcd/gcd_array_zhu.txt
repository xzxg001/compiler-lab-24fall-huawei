; ModuleID = '/home/zoulinzhuang/compiler-lab-24fall/tests/lab3/ta_gcd/gcd_array.c'
source_filename = "/home/zoulinzhuang/compiler-lab-24fall/tests/lab3/ta_gcd/gcd_array.c"
target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
target triple = "aarch64-unknown-linux-gnu"

; 全局变量定义
@x = dso_local global [1 x i32] zeroinitializer, align 4
@y = dso_local global [1 x i32] zeroinitializer, align 4

; gcd 函数的定义，计算两个整数的最大公约数
define dso_local i32 @gcd(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4          ; 分配局部变量空间
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, ptr %4, align 4      ; 参数赋值
  store i32 %1, ptr %5, align 4
  %6 = load i32, ptr %5, align 4     ; 载入第二个数
  %7 = icmp eq i32 %6, 0             ; 检查是否为0
  br i1 %7, label %8, label %10      ; 如果为0，跳转到标签8，否则跳转到标签10

8:                                ; 标签8
  %9 = load i32, ptr %4, align 4     ; 载入第一个数
  store i32 %9, ptr %3, align 4     ; 存储到局部变量
  br label %20                     ; 跳转到标签20

10:                               ; 标签10
  %11 = load i32, ptr %5, align 4    ; 载入第二个数
  %12 = load i32, ptr %4, align 4   ; 载入第一个数
  %13 = load i32, ptr %4, align 4   ; 再次载入第一个数
  %14 = load i32, ptr %5, align 4   ; 再次载入第二个数
  %15 = sdiv i32 %13, %14          ; 整数除法
  %16 = load i32, ptr %5, align 4   ; 载入第二个数
  %17 = mul nsw i32 %15, %16       ; 乘法
  %18 = sub nsw i32 %12, %17       ; 减法
  %19 = call i32 @gcd(i32 noundef %11, i32 noundef %18) ; 递归调用gcd
  store i32 %19, ptr %3, align 4    ; 存储结果
  br label %20                    ; 跳转到标签20

20:                               ; 标签20
  %21 = load i32, ptr %3, align 4   ; 载入结果
  ret i32 %21                     ; 返回结果
}

; funArray 函数的定义，使用 gcd 函数
define dso_local i32 @funArray(ptr noundef %0, ptr noundef %1) #0 {
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store ptr %0, ptr %3, align 8     ; 参数赋值
  store ptr %1, ptr %4, align 8
  %8 = load ptr, ptr %3, align 8   ; 载入第一个数组的地址
  %9 = getelementptr inbounds i32, ptr %8, i64 0 ; 获取数组的第一个元素的地址
  %10 = load i32, ptr %9, align 4  ; 载入数组的第一个元素
  store i32 %10, ptr %5, align 4   ; 存储到局部变量
  %11 = load ptr, ptr %4, align 8  ; 载入第二个数组的地址
  %12 = getelementptr inbounds i32, ptr %11, i64 0 ; 获取数组的第一个元素的地址
  %13 = load i32, ptr %12, align 4 ; 载入数组的第一个元素
  store i32 %13, ptr %6, align 4   ; 存储到局部变量
  %14 = load i32, ptr %5, align 4  ; 载入第一个元素
  %15 = load i32, ptr %6, align 4  ; 载入第二个元素
  %16 = icmp slt i32 %14, %15      ; 比较大小
  br i1 %16, label %17, label %21  ; 如果第一个元素小于第二个元素，跳转到标签17，否则跳转到标签21

17:                               ; 标签17
  %18 = load i32, ptr %5, align 4   ; 载入第一个元素
  store i32 %18, ptr %7, align 4   ; 存储到局部变量
  %19 = load i32, ptr %6, align 4  ; 载入第二个元素
  store i32 %19, ptr %5, align 4   ; 存储到局部变量
  %20 = load i32, ptr %7, align 4  ; 载入局部变量
  store i32 %20, ptr %6, align 4   ; 存储到局部变量
  br label %21                    ; 跳转到标签21

21:                               ; 标签21
  %22 = load i32, ptr %5, align 4  ; 载入第一个元素
  %23 = load i32, ptr %6, align 4  ; 载入第二个元素
  %24 = call i32 @gcd(i32 noundef %22, i32 noundef %23) ; 调用gcd函数
  ret i32 %24                     ; 返回结果
}

; main 函数的定义
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [10 x i32], align 4
  store i32 0, ptr %1, align 4     ; 初始化局部变量
  %3 = getelementptr inbounds [10 x i32], ptr %2, i64 0, i64 1 ; 获取数组的第二个元素的地址
  store i32 1, ptr %3, align 4     ; 初始化数组的第二个元素
  store i32 90, ptr @x, align 4    ; 初始化全局变量x
  store i32 18, ptr @y, align 4    ; 初始化全局变量y
  %4 = call i32 @funArray(ptr noundef @x, ptr noundef @y) ; 调用funArray函数
  ret i32 %4                     ; 返回结果
}

; 函数属性
attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+fp-armv8,+neon,+outline-atomics,+v8a,-fmv" }

; 模块标志
!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 1}
!5 = !{!"BiSheng Enterprise 4.0.0.B014 clang version 17.0.6 (0ac87bc45325)"}